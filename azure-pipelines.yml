
trigger:
  none
  
name: Azure Pipelines
variables:
  python.version: '3.7.6'
  terraformPlanOutput: 'solution.plan'
  vmImageVersion: 'ubuntu-18.04'
  applicationType: 'erq'
stages:
# - stage: Provisioning
#   displayName: Provisioning
#   jobs: 
#   - job: ProvisioningAppService
#     displayName: Provisioning AppService
#     pool:
#       vmImage: $(vmImageVersion)
#     steps:
#     - task: DownloadSecureFile@1
#       name: tfvardef
#       displayName: Download terraform.tfvars
#       inputs:
#         secureFile: 'terraform.tfvars'
#     - task: InstallSSHKey@0
#       inputs:
#         knownHostsEntry: 'default'
#         sshKeySecureFile: 'id_rsa'
#     - task: Bash@3
#       inputs:
#         targetType: 'inline'
#         script: |
#           ls /home/vsts/work/_temp/
    
#     - task: Bash@3
#       inputs:
#         targetType: 'inline'
#         script: 'cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/'
    
#     - task: TerraformInstaller@0
#       displayName: Install Terraform
#       inputs:
#         terraformVersion: '1.0.0'
    
#     - task: TerraformTaskV2@2
#       displayName: Terraform Init
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         backendServiceArm: 'EnsureReleaseQulaity'
#         backendAzureRmResourceGroupName: 'tstate'
#         backendAzureRmStorageAccountName: 'tstate2475'
#         backendAzureRmContainerName: 'tstate'
#         backendAzureRmKey: 'terraform.tfstate'

#     - task: TerraformTaskV2@2
#       displayName: Terraform Plan
#       inputs:
#         provider: 'azurerm'
#         command: 'plan'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         commandOptions: '-out $(terraformPlanOutput)'
#         environmentServiceNameAzureRM: 'EnsureReleaseQulaity'

#     - task: TerraformTaskV1@0
#       displayName: Terraform Apply
#       inputs:
#         provider: 'azurerm'
#         command: 'apply'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         environmentServiceNameAzureRM: 'EnsureReleaseQulaity'

# - stage: Wait
#   jobs:
#     - job: RunsOnServer
#       pool: Server
#       steps:
#       - task: Delay@1
#         inputs:
#           delayForMinutes: '2'

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build Artifacts
    pool:
      vmImage: $(vmImageVersion)
    steps:
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true

    - task: PublishPipelineArtifact@1
      displayName: Publish FakeRestAPI artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'drop-fakerestapi'

    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true

    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'drop-selenium'

- stage: Deployment
  jobs:
  - deployment: deployment_fakerestapi
    displayName: Deploy FakeRestAPI
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'WEBAPP-TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: Deploy Azure WebApp
            inputs:
              azureSubscription: 'EnsureReleaseQulaity'
              appName: '$(applicationType)-AppService'
              appType: 'webAppLinux'
              package: $(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip
              deploymentMethod: 'auto'

  - deployment: VMDeploy
    displayName: VM Deploy
    environment:
      name:  'VM-TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Install Dependencies'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                
                # download chrome driver
                FILE=chromedriver_linux64.zip
                if [ -f "$FILE" ]; then
                  echo "$FILE exists."
                else
                  #latest version on 21.06.2021
                  wget https://chromedriver.storage.googleapis.com/89.0.4389.23/chromedriver_linux64.zip
                fi
                # install chrome driver
                unzip chromedriver_linux64.zip
                sudo mv chromedriver /usr/bin/chromedriver
                sudo chown root:root /usr/bin/chromedriver
                sudo chmod +x /usr/bin/chromedriver
                chromium-browser -version
                chromedriver --version
                # wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w $(WORKSPACE_ID) -s $(WORKSPACE_PRIMARY_KEY)
              # env:
              # WORKSPACE_ID: $(workspaceID)
              # WORKSPACE_PRIMARY_KEY: $(workspacePrimaryKey)

          - download: current
            displayName: 'Download Selenium'
            artifact: selenium
          - task: Bash@3
            displayName: UI Tests
            inputs:
              targetType: 'inline'
              script: |
                unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                sudo mkdir /var/logs
                python3 uitests.py > ui-logs.log
                sudo mv ui-logs.log /var/logs

# - stage: Destroy
#   displayName: Delete deployed resources
#   jobs: 
#   - job: DestroyingDeloyedResources
#     displayName: Delete deployed resources
#     pool:
#       vmImage: $(vmImageVersion)
#     steps:
#     - task: DownloadSecureFile@1
#       name: tfvardef
#       displayName: Download terraform.tfvars
#       inputs:
#         secureFile: 'terraform.tfvars'

#     - task: InstallSSHKey@0
#       inputs:
#         knownHostsEntry: 'default'
#         sshKeySecureFile: 'id_rsa'

#     - task: Bash@3
#       inputs:
#         targetType: 'inline'
#         script: |
#           ls /home/vsts/work/_temp/
    
#     - task: Bash@3
#       inputs:
#         targetType: 'inline'
#         script: 'cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/'
    
#     - task: TerraformInstaller@0
#       displayName: Install Terraform
#       inputs:
#         terraformVersion: '1.0.0'
    
#     - task: TerraformTaskV2@2
#       displayName: Terraform Init
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         backendServiceArm: 'EnsureReleaseQulaity'
#         backendAzureRmResourceGroupName: 'tstate'
#         backendAzureRmStorageAccountName: 'tstate2475'
#         backendAzureRmContainerName: 'tstate'
#         backendAzureRmKey: 'terraform.tfstate'

#     - task: TerraformTaskV2@2
#       displayName: Terraform Destroy
#       inputs:
#         provider: 'azurerm'
#         command: 'destroy'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         environmentServiceNameAzureRM: 'EnsureReleaseQulaity'