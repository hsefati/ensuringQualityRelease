
trigger:
  none
  
name: Azure Pipelines
variables:
  python.version: '3.7.6'
  terraformPlanOutput: 'solution.plan'
  vmImageVersion: 'ubuntu-18.04'
  applicationType: 'erq'
stages:
# - stage: Provisioning
#   displayName: Provisioning
#   jobs: 
#   - job: ProvisioningAppService
#     displayName: Provisioning AppService
#     pool:
#       vmImage: $(vmImageVersion)
#     steps:
#     - task: DownloadSecureFile@1
#       name: tfvardef
#       displayName: Download terraform.tfvars
#       inputs:
#         secureFile: 'terraform.tfvars'
#     - task: InstallSSHKey@0
#       inputs:
#         knownHostsEntry: 'default'
#         sshKeySecureFile: 'id_rsa'
#     - task: Bash@3
#       inputs:
#         targetType: 'inline'
#         script: |
#           ls /home/vsts/work/_temp/
    
#     - task: Bash@3
#       inputs:
#         targetType: 'inline'
#         script: 'cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/'
    
#     - task: TerraformInstaller@0
#       displayName: Install Terraform
#       inputs:
#         terraformVersion: '1.0.0'
    
#     - task: TerraformTaskV2@2
#       displayName: Terraform Init
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         backendServiceArm: 'EnsureReleaseQulaity'
#         backendAzureRmResourceGroupName: 'tstate'
#         backendAzureRmStorageAccountName: 'tstate2475'
#         backendAzureRmContainerName: 'tstate'
#         backendAzureRmKey: 'terraform.tfstate'

#     - task: TerraformTaskV2@2
#       displayName: Terraform Plan
#       inputs:
#         provider: 'azurerm'
#         command: 'plan'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         commandOptions: '-out $(terraformPlanOutput)'
#         environmentServiceNameAzureRM: 'EnsureReleaseQulaity'

#     - task: TerraformTaskV1@0
#       displayName: Terraform Apply
#       inputs:
#         provider: 'azurerm'
#         command: 'apply'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         environmentServiceNameAzureRM: 'EnsureReleaseQulaity'

# - stage: Wait
#   jobs:
#     - job: RunsOnServer
#       pool: Server
#       steps:
#       - task: Delay@1
#         inputs:
#           delayForMinutes: '2'

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build Artifacts
    pool:
      vmImage: $(vmImageVersion)
    steps:
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true

    - task: PublishPipelineArtifact@1
      displayName: Publish FakeRestAPI artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'fakerestapi'

    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true

    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'selenium'

- stage: Deployment
  jobs:
  - deployment: deployment_fakerestapi
    displayName: Deploy FakeRestAPI
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'WEBAPP-TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: Deploy Azure WebApp
            inputs:
              azureSubscription: 'EnsureReleaseQulaity'
              appName: '$(applicationType)-AppService'
              appType: 'webAppLinux'
              package: $(Pipeline.Workspace)/fakerestapi/fakerestapi-$(Build.BuildId).zip
              deploymentMethod: 'auto'

  - deployment: VMDeploy
    displayName: VM Deploy
    environment:
      name:  'VM-TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Install Dependencies'
            inputs:
              targetType: 'inline'
              script: |                
                  pwd
                  hostname
                  uname -a
                  cat /etc/*-release
                  sudo apt-get install software-properties-common -y
                  sudo apt-add-repository universe -y
                  sudo apt-get update -y
                  sudo apt-get install python3-pip -y
                  sudo apt-get install unzip -y
                  sudo apt-get install -y chromium-browser
                  sudo apt-get install -y chromium-chromedriver
                  python3 -m pip install --upgrade pip
                  pip3 install selenium
                  python3 -V
                  pip3 -V
                  /usr/bin/chromium-browser --version
                  /usr/bin/chromedriver --version
                  wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w 25b9a11f-6c54-4bfe-a79a-82eab0f50a30 -s KLHkJd7lq/L1QF39TGEiMlbGI5Q3OYRfqrJqB69Ow37Zj8YaBKLP/NaFc6XJOZieBkCOBYbv2hxw4ZHlKrJabA==


- stage: UITests
  displayName: User Interface Tests
  jobs:
  - deployment: VMRunUITests
    displayName: Run UI Tests
    environment:
      name:  'VM-TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: 'Download Selenium'
            artifact: selenium
          - task: Bash@3
            displayName: UI Tests
            inputs:
              targetType: 'inline'
              script: |
                unzip -o $(Pipeline.Workspace)/selenium/selenium-$(Build.BuildId).zip -d .
                sudo mkdir -p /var/logs
                python3 userInterfaceTest.py
                sudo mv ui-logs.log /var/logs

- stage: IntegrationTests
  displayName: Integration Tests
  jobs:
  - job: PostmanTests
    displayName: PostmanTests
    steps: 
    - task: NodeTool@0
      displayName: Install Node v14.X
      inputs:
        versionSpec: '14.x'
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'npm install newman'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      displayName: Run Regression Tests
      inputs:
        script: 'newman run automatedtesting/postman/Regression.postman_collection.json \
                        -e automatedtesting/postman/envVariable.postman_environment.json \
                        --delay-request 5000 --bail newman -x --reporters cli,junit \
                        --reporter-junit-export Results/RegressionTests.xml --suppress-exit-code'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      continueOnError: true
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      inputs:
        script: 'newman run automatedtesting/postman/Validation.postman_collection.json \
                        -e automatedtesting/postman/envVariable.postman_environment.json \
                        --delay-request 5000 --bail newman -x --reporters cli,junit \
                        --reporter-junit-export Results/DataValidationTests.xml --suppress-exit-code'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      continueOnError: true
    - task: CmdLine@2
      inputs:
        script: 'ls -la ./Results/'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: PublishTestResults@2
      displayName: Publish Test Reports
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/Results/*.xml'

- stage: JMeterTests
  displayName: JMeter Tests
  jobs:
  - job: JMeterTests
    displayName: JMeterTests
    steps: 
    - task: JMeterInstaller@0
      inputs:
        jmeterVersion: '5.4.1'
    - task: Bash@3
      displayName: EnduranceTest
      inputs:
        targetType: 'inline'
        script: 'jmeter -n -t automatedtesting/jmeter/EnduranceTestSuite.jmx -l automatedtesting/jmeter/log/endurancepages.csv -e -f -o automatedtesting/jmeter/endurance-test-html-report -j automatedtesting/jmeter/log/enduranceresults.log'
    - task: Bash@3
      displayName: StressTest
      inputs:
        targetType: 'inline'
        script: 'jmeter -n -t automatedtesting/jmeter/StressTestSuite.jmx -l automatedtesting/jmeter/log/stresspages.csv -e -f -o automatedtesting/jmeter/stress-test-html-report -j automatedtesting/jmeter/log/stressresults.log'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'automatedtesting/jmeter'
        ArtifactName: 'jmeterResult'
        publishLocation: 'Container'

# - stage: Destroy
#   displayName: Delete deployed resources
#   jobs: 
#   - job: DestroyingDeloyedResources
#     displayName: Delete deployed resources
#     pool:
#       vmImage: $(vmImageVersion)
#     steps:
#     - task: DownloadSecureFile@1
#       name: tfvardef
#       displayName: Download terraform.tfvars
#       inputs:
#         secureFile: 'terraform.tfvars'

#     - task: InstallSSHKey@0
#       inputs:
#         knownHostsEntry: 'default'
#         sshKeySecureFile: 'id_rsa'

#     - task: Bash@3
#       inputs:
#         targetType: 'inline'
#         script: |
#           ls /home/vsts/work/_temp/
    
#     - task: Bash@3
#       inputs:
#         targetType: 'inline'
#         script: 'cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/'
    
#     - task: TerraformInstaller@0
#       displayName: Install Terraform
#       inputs:
#         terraformVersion: '1.0.0'
    
#     - task: TerraformTaskV2@2
#       displayName: Terraform Init
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         backendServiceArm: 'EnsureReleaseQulaity'
#         backendAzureRmResourceGroupName: 'tstate'
#         backendAzureRmStorageAccountName: 'tstate2475'
#         backendAzureRmContainerName: 'tstate'
#         backendAzureRmKey: 'terraform.tfstate'

#     - task: TerraformTaskV2@2
#       displayName: Terraform Destroy
#       inputs:
#         provider: 'azurerm'
#         command: 'destroy'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         environmentServiceNameAzureRM: 'EnsureReleaseQulaity'